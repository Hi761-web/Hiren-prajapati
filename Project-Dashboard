!pip install jupyter-dash
import pandas as pd
import plotly.express as px
from jupyter_dash import JupyterDash
from dash import dcc, html
from dash.dependencies import Input, Output

# Load the dataset
file_path =r"C:\Users\hiren\Downloads\data.csv"
df = pd.read_csv(file_path)

# Convert Purchase_Date to datetime
df['Purchase_Date'] = pd.to_datetime(df['Purchase_Date'])

# Initialize JupyterDash app
app = JupyterDash(__name__)

# Layout
app.layout = html.Div([
    html.H1("Interactive Sales Dashboard"),
    
    dcc.DatePickerRange(
        id='date_range',
        start_date=df['Purchase_Date'].min(),
        end_date=df['Purchase_Date'].max(),
        display_format='YYYY-MM-DD'
    ),
    
    dcc.Graph(id='sales_trend'),
    
    dcc.Dropdown(
        id='category_dropdown',
        options=[{'label': cat, 'value': cat} for cat in df['Category'].unique()],
        value=df['Category'].unique()[0],
        clearable=False
    ),
    
    dcc.Graph(id='category_sales'),
    
    dcc.Graph(id='payment_method_distribution'),
    
    dcc.Graph(id='customer_demographics'),
    
    dcc.Graph(id='discount_analysis')
])

# Callbacks
@app.callback(
    Output('sales_trend', 'figure'),
    [Input('date_range', 'start_date'),
     Input('date_range', 'end_date')]
)
def update_sales_trend(start_date, end_date):
    filtered_df = df[(df['Purchase_Date'] >= start_date) & (df['Purchase_Date'] <= end_date)]
    sales_trend = filtered_df.groupby('Purchase_Date')['Purchase_Amount'].sum().reset_index()
    fig = px.line(sales_trend, x='Purchase_Date', y='Purchase_Amount', title='Sales Trend Over Time')
    return fig

@app.callback(
    Output('category_sales', 'figure'),
    [Input('category_dropdown', 'value')]
)
def update_category_sales(category):
    filtered_df = df[df['Category'] == category]
    fig = px.bar(filtered_df, x='Product_Name', y='Purchase_Amount', title=f'Sales by Product in {category}')
    return fig

@app.callback(
    Output('payment_method_distribution', 'figure'),
    [Input('date_range', 'start_date'),
     Input('date_range', 'end_date')]
)
def update_payment_method_distribution(start_date, end_date):
    filtered_df = df[(df['Purchase_Date'] >= start_date) & (df['Purchase_Date'] <= end_date)]
    fig = px.pie(filtered_df, names='Payment_Method', title='Payment Method Distribution')
    return fig

@app.callback(
    Output('customer_demographics', 'figure'),
    [Input('date_range', 'start_date'),
     Input('date_range', 'end_date')]
)
def update_customer_demographics(start_date, end_date):
    filtered_df = df[(df['Purchase_Date'] >= start_date) & (df['Purchase_Date'] <= end_date)]
    fig = px.histogram(filtered_df, x='Age', color='Gender', title='Customer Demographics by Age and Gender')
    return fig

@app.callback(
    Output('discount_analysis', 'figure'),
    [Input('date_range', 'start_date'),
     Input('date_range', 'end_date')]
)
def update_discount_analysis(start_date, end_date):
    filtered_df = df[(df['Purchase_Date'] >= start_date) & (df['Purchase_Date'] <= end_date)]
    fig = px.bar(filtered_df, x='Discount_Applied', y='Purchase_Amount', title='Impact of Discounts on Sales', barmode='group')
    return fig

# Run the app inside Jupyter Notebook
app.run_server(mode="inline")
